Apache Hadoop
									From Wikipedia, the free encyclopedia																									Jump to:					navigation, 					search								This article has multiple issues. Please help improve it or discuss these issues on the talk page.This article appears to be written like an advertisement. Please help improve it by rewriting promotional content from a neutral point of view and removing any inappropriate external links. (October 2013)This article appears to contain a large number of buzzwords. Specific concerns may be found on the talk page. Please help improve this article if you can. (October 2013)Apache HadoopDeveloper(s)Apache Software FoundationStable release2.4 / April 7, 2014 (2014-04-07)[1]Development statusActiveWritten inJavaOperating systemCross-platformTypeDistributed file systemLicenseApache License 2.0Websitehadoop.apache.orgApache Hadoop is an open-source software framework for storage and large-scale processing of data-sets on clusters of commodity hardware. Hadoop is an Apache top-level project being built and used by a global community of contributors and users.[2] It is licensed under the Apache License 2.0.The Apache Hadoop framework is composed of the following modules:Hadoop Common – contains libraries and utilities needed by other Hadoop modulesHadoop Distributed File System (HDFS) – a distributed file-system that stores data on commodity machines, providing very high aggregate bandwidth across the cluster.Hadoop YARN – a resource-management platform responsible for managing compute resources in clusters and using them for scheduling of users' applications.Hadoop MapReduce – a programming model for large scale data processing.All the modules in Hadoop are designed with a fundamental assumption that hardware failures (of individual machines, or racks of machines) are common and thus should be automatically handled in software by the framework. Apache Hadoop's MapReduce and HDFS components originally derived respectively from Google's MapReduce and Google File System (GFS) papers.Beyond HDFS, YARN and MapReduce, the entire Apache Hadoop "platform" is now commonly considered to consist of a number of related projects as well – Apache Pig, Apache Hive, Apache HBase, Apache Spark, and others.[3]For the end-users, though MapReduce Java code is common, any programming language can be used with "Hadoop Streaming" to implement the "map" and "reduce" parts of the user's program.[4] Apache Pig, Apache Hive, Apache Spark among other related projects expose higher level user interfaces like Pig latin and a SQL variant respectively. The Hadoop framework itself is mostly written in the Java programming language, with some native code in C and command line utilities written as shell-scripts.Apache Hadoop is a registered trademark of the Apache Software Foundation.Contents1 History2 Architecture2.1 File system2.1.1 Hadoop distributed file system2.1.2 Other file systems2.2 JobTracker and TaskTracker: the MapReduce engine2.2.1 Scheduling2.2.1.1 Fair scheduler2.2.1.2 Capacity scheduler2.3 Other applications3 Prominent users3.1 Yahoo!3.2 Facebook3.3 Other users4 Hadoop on Amazon EC2/S3 services4.1 Amazon Elastic MapReduce5 Industry support of academic clusters6 Running Hadoop in compute farm environments6.1 Condor integration7 Commercial support7.1 ASF's view on the use of "Hadoop" in product names8 Papers9 See also10 References11 Bibliography12 External linksHistory[edit]Hadoop was created by Doug Cutting and Mike Cafarella[5] in 2005. Cutting, who was working at Yahoo! at the time,[6] named it after his son's toy elephant.[7] It was originally developed to support distribution for the Nutch search engine project.[8]Architecture[edit]See also: Hadoop Distributed File System, Apache HBase and MapReduceHadoop consists of the Hadoop Common package, which provides filesystem and OS level abstractions, a MapReduce engine (either MapReduce/MR1 or YARN/MR2)[9] and the Hadoop Distributed File System (HDFS). The Hadoop Common package contains the necessary Java ARchive (JAR) files and scripts needed to start Hadoop. The package also provides source code, documentation and a contribution section that includes projects from the Hadoop Community.[citation needed]For effective scheduling of work, every Hadoop-compatible file system should provide location awareness: the name of the rack (more precisely, of the network switch) where a worker node is. Hadoop applications can use this information to run work on the node where the data is, and, failing that, on the same rack/switch, reducing backbone traffic. HDFS uses this method when replicating data to try to keep different copies of the data on different racks. The goal is to reduce the impact of a rack power outage or switch failure, so that even if these events occur, the data may still be readable.[10]A multi-node Hadoop clusterA small Hadoop cluster includes a single master and multiple worker nodes. The master node consists of a JobTracker, TaskTracker, NameNode and DataNode. A slave or worker node acts as both a DataNode and TaskTracker, though it is possible to have data-only worker nodes and compute-only worker nodes. These are normally used only in nonstandard applications.[11] Hadoop requires Java Runtime Environment (JRE) 1.6 or higher. The standard start-up and shutdown scripts require Secure Shell (ssh) to be set up between nodes in the cluster.[12]In a larger cluster, the HDFS is managed through a dedicated NameNode server to host the file system index, and a secondary NameNode that can generate snapshots of the namenode's memory structures, thus preventing file-system corruption and reducing loss of data. Similarly, a standalone JobTracker server can manage job scheduling. In clusters where the Hadoop MapReduce engine is deployed against an alternate file system, the NameNode, secondary NameNode and DataNode architecture of HDFS is replaced by the file-system-specific equivalent.File system[edit]Hadoop distributed file system[edit]The Hadoop distributed file system (HDFS) is a distributed, scalable, and portable file-system written in Java for the Hadoop framework. Each node in a Hadoop instance typically has a single namenode; a cluster of datanodes form the HDFS cluster. The situation is typical because each node does not require a datanode to be present. Each datanode serves up blocks of data over the network using a block protocol specific to HDFS. The file system uses the TCP/IP layer for communication. Clients use remote procedure call (RPC) to communicate between each other.HDFS stores large files (typically in the range of gigabytes to terabytes[13]) across multiple machines. It achieves reliability by replicating the data across multiple hosts, and hence theoretically does not require RAID storage on hosts (but to increase I/O performance some RAID configurations are still useful). With the default replication value, 3, data is stored on three nodes: two on the same rack, and one on a different rack. Data nodes can talk to each other to rebalance data, to move copies around, and to keep the replication of data high. HDFS is not fully POSIX-compliant, because the requirements for a POSIX file-system differ from the target goals for a Hadoop application. The tradeoff of not having a fully POSIX-compliant file-system is increased performance for data throughput and support for non-POSIX operations such as Append.[14]HDFS added the high-availability capabilities, as announced for release 2.0 in May 2012,[15] allowing the main metadata server (the NameNode) to be failed over manually to a backup in the event of failure. The project has also started developing automatic fail-over.The HDFS file system includes a so-called secondary namenode, which misleads some people into thinking[citation needed] that when the primary namenode goes offline, the secondary namenode takes over. In fact, the secondary namenode regularly connects with the primary namenode and builds snapshots of the primary namenode's directory information, which the system then saves to local or remote directories. These checkpointed images can be used to restart a failed primary namenode without having to replay the entire journal of file-system actions, then to edit the log to create an up-to-date directory structure. Because the namenode is the single point for storage and management of metadata, it can become a bottleneck for supporting a huge number of files, especially a large number of small files. HDFS Federation, a new addition, aims to tackle this problem to a certain extent by allowing multiple name-spaces served by separate namenodes.An advantage of using HDFS is data awareness between the job tracker and task tracker. The job tracker schedules map or reduce jobs to task trackers with an awareness of the data location. For example: if node A contains data (x,y,z) and node B contains data (a,b,c), the job tracker schedules node B to perform map or reduce tasks on (a,b,c) and node A would be scheduled to perform map or reduce tasks on (x,y,z). This reduces the amount of traffic that goes over the network and prevents unnecessary data transfer. When Hadoop is used with other file systems this advantage is not always available. This can have a significant impact on job-completion times, which has been demonstrated when running data-intensive jobs.[16]HDFS was designed[by whom?] for mostly immutable files[14] and may not be suitable for systems requiring concurrent write-operations.Another limitation of HDFS is that it cannot be mounted directly by an existing operating system. Getting data into and out of the HDFS file system, an action that often needs to be performed before and after executing a job, can be inconvenient. A Filesystem in Userspace (FUSE) virtual file system has been developed to address this problem, at least for Linux and some other Unix systems.File access can be achieved through the native Java API, the Thrift API to generate a client in the language of the users' choosing (C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk, and OCaml), the command-line interface, or browsed through the HDFS-UI webapp over HTTP.Other file systems[edit]Hadoop works directly with any distributed file system that can be mounted by the underlying operating system simply by using a file:// URL; however, this comes at a price: the loss of locality. To reduce network traffic, Hadoop needs to know which servers are closest to the data; this is information that Hadoop-specific file system bridges can provide.In May 2011, the list of supported file systems bundled with Apache Hadoop were:HDFS: Hadoop's own rack-aware file system.[17] This is designed to scale to tens of petabytes of storage and runs on top of the file systems of the underlying operating systems.FTP File system: this stores all its data on remotely accessible FTP servers.Amazon S3 file system. This is targeted at clusters hosted on the Amazon Elastic Compute Cloud server-on-demand infrastructure. There is no rack-awareness in this file system, as it is all remote.A number of third-party file system bridges have also been written, none of which are currently in Hadoop distributions. However, some commercial distributions of Hadoop ship with an alternative filesystem as the default, -specifically IBM and MapR.In 2009 IBM discussed running Hadoop over the IBM General Parallel File System.[18] The source code was published in October 2009.[19]In April 2010, Parascale published the source code to run Hadoop against the Parascale file system.[20]In April 2010, Appistry released a Hadoop file system driver for use with its own CloudIQ Storage product.[21]In June 2010, HP discussed a location-aware IBRIX Fusion file system driver.[22]In May 2011, MapR Technologies, Inc. announced the availability of an alternative file system for Hadoop, which replaced the HDFS file system with a full random-access read/write file system.JobTracker and TaskTracker: the MapReduce engine[edit]Main article: MapReduceAbove the file systems comes the MapReduce engine, which consists of one JobTracker, to which client applications submit MapReduce jobs. The JobTracker pushes work out to available TaskTracker nodes in the cluster, striving to keep the work as close to the data as possible. With a rack-aware file system, the JobTracker knows which node contains the data, and which other machines are nearby. If the work cannot be hosted on the actual node where the data resides, priority is given to nodes in the same rack. This reduces network traffic on the main backbone network. If a TaskTracker fails or times out, that part of the job is rescheduled. The TaskTracker on each node spawns off a separate Java Virtual Machine process to prevent the TaskTracker itself from failing if the running job crashes the JVM. A heartbeat is sent from the TaskTracker to the JobTracker every few minutes to check its status. The Job Tracker and TaskTracker status and information is exposed by Jetty and can be viewed from a web browser.If the JobTracker failed on Hadoop 0.20 or earlier, all ongoing work was lost. Hadoop version 0.21 added some checkpointing to this process; the JobTracker records what it is up to in the file system. When a JobTracker starts up, it looks for any such data, so that it can restart work from where it left off.Known limitations of this approach are:The allocation of work to TaskTrackers is very simple. Every TaskTracker has a number of available slots (such as "4 slots"). Every active map or reduce task takes up one slot. The Job Tracker allocates work to the tracker nearest to the data with an available slot. There is no consideration of the current system load of the allocated machine, and hence its actual availability.If one TaskTracker is very slow, it can delay the entire MapReduce job – especially towards the end of a job, where everything can end up waiting for the slowest task. With speculative execution enabled, however, a single task can be executed on multiple slave nodes.Scheduling[edit]By default Hadoop uses FIFO, and optional 5 scheduling priorities to schedule jobs from a work queue.[23] In version 0.19 the job scheduler was refactored out of the JobTracker, and added the ability to use an alternate scheduler (such as the Fair scheduler or the Capacity scheduler).[24]Fair scheduler[edit]The fair scheduler was developed by Facebook.[25] The goal of the fair scheduler is to provide fast response times for small jobs and QoS for production jobs. The fair scheduler has three basic concepts.[26]Jobs are grouped into Pools.Each pool is assigned a guaranteed minimum share.Excess capacity is split between jobs.By default, jobs that are uncategorized go into a default pool. Pools have to specify the minimum number of map slots, reduce slots, and a limit on the number of running jobs.Capacity scheduler[edit]The capacity scheduler was developed by Yahoo. The capacity scheduler supports several features that are similar to the fair scheduler.[27]Jobs are submitted into queues.Queues are allocated a fraction of the total resource capacity.Free resources are allocated to queues beyond their total capacity.Within a queue a job with a high level of priority has access to the queue's resources.There is no preemption once a job is running.Other applications[edit]The HDFS file system is not restricted to MapReduce jobs. It can be used for other applications, many of which are under development at Apache. The list includes the HBase database, the Apache Mahout machine learning system, and the Apache Hive Data Warehouse system. Hadoop can in theory be used for any sort of work that is batch-oriented rather than real-time, that is very data-intensive, and able to work on pieces of the data in parallel. As of October 2009, commercial applications of Hadoop[28] included:Log and/or clickstream analysis of various kindsMarketing analyticsMachine learning and/or sophisticated data miningImage processingProcessing of XML messagesWeb crawling and/or text processingGeneral archiving, including of relational/tabular data, e.g. for complianceProminent users[edit]Yahoo![edit]On February 19, 2008, Yahoo! Inc. launched what it claimed was the world's largest Hadoop production application. The Yahoo! Search Webmap is a Hadoop application that runs on a more than 10,000 core Linux cluster and produces data that was used in every Yahoo! Web search query.[29]There are multiple Hadoop clusters at Yahoo! and no HDFS file systems or MapReduce jobs are split across multiple datacenters. Every Hadoop cluster node bootstraps the Linux image, including the Hadoop distribution. Work that the clusters perform is known to include the index calculations for the Yahoo! search engine.On June 10, 2009, Yahoo! made the source code of the version of Hadoop it runs in production available to the public.[30] Yahoo! contributes all the work it does on Hadoop to the open-source community. The company's developers also fix bugs, provide stability improvements internally and release this patched source code so that other users may benefit from their effort.Facebook[edit]In 2010 Facebook claimed that they had the largest Hadoop cluster in the world with 21 PB of storage.[31] On June 13, 2012 they announced the data had grown to 100 PB.[32] On November 8, 2012 they announced the data gathered in the warehouse grows by roughly half a PB per day.[33]Other users[edit]As of 2013, Hadoop adoption is widespread. For example, more than half of the Fortune 50 uses Hadoop.[34]Hadoop on Amazon EC2/S3 services[edit]It is possible to run Hadoop on Amazon Elastic Compute Cloud (EC2) and Amazon Simple Storage Service (S3).[35] As an example The New York Times used 100 Amazon EC2 instances and a Hadoop application to process 4 TB of raw image TIFF data (stored in S3) into 11 million finished PDFs in the space of 24 hours at a computation cost of about $240 (not including bandwidth).[36]There is support for the S3 file system in Hadoop distributions, and the Hadoop team generates EC2 machine images after every release. From a pure performance perspective, Hadoop on S3/EC2 is inefficient, as the S3 file system is remote and delays returning from every write operation until the data is guaranteed not to be lost. This removes the locality advantages of Hadoop, which schedules work near data to save on network load.Amazon Elastic MapReduce[edit]Elastic MapReduce (EMR)[37] was introduced by Amazon in April 2009. Provisioning of the Hadoop cluster, running and terminating jobs, and handling data transfer between EC2 and S3 are automated by Elastic MapReduce. Apache Hive, which is built on top of Hadoop for providing data warehouse services, is also offered in Elastic MapReduce.[38]Support for using Spot Instances[39] was later added in August 2011.[40] Elastic MapReduce is fault tolerant for slave failures,[41] and it is recommended to only run the Task Instance Group on spot instances to take advantage of the lower cost while maintaining availability.[42]Industry support of academic clusters[edit]IBM and Google announced an initiative in 2007 to use Hadoop to support university courses in distributed computer programming.[43]In 2008 this collaboration, the Academic Cloud Computing Initiative (ACCI), partnered with the National Science Foundation to provide grant funding to academic researchers interested in exploring large-data applications. This resulted in the creation of the Cluster Exploratory (CLuE) program.[44]Running Hadoop in compute farm environments[edit]Hadoop can also be used in compute farms and high-performance computing environments. Instead of setting up a dedicated Hadoop cluster, an existing compute farm can be used if the resource manager of the cluster is aware of the Hadoop jobs, and thus Hadoop jobs can be scheduled like other jobs in the cluster.Condor integration[edit]The Condor High-Throughput Computing System integration was presented at the Condor Week conference in 2010.[45]Commercial support[edit]A number of companies offer commercial implementations or support for Hadoop.[46]ASF's view on the use of "Hadoop" in product names[edit]The Apache Software Foundation has stated that only software officially released by the Apache Hadoop Project can be called Apache Hadoop or Distributions of Apache Hadoop.[47] The naming of products and derivative works from other vendors and the term "compatible" are somewhat controversial within the Hadoop developer community.[48]Papers[edit]Some papers influenced the birth and growth of Hadoop and big data processing. Here is a partial list:2004 MapReduce: Simplified Data Processing on Large Clusters by Jeffrey Dean and Sanjay Ghemawat from Google Lab. This paper inspired Doug Cutting to develop an open-source implementation of the Map-Reduce framework. He named it Hadoop, after his son's toy elephant.2005 From Databases to Dataspaces: A New Abstraction for Information Management, the authors highlight the need for storage systems to accept all data formats and to provide APIs for data access that evolve based on the storage system’s understanding of the data.2006 Bigtable: A Distributed Storage System for Structured Data from Google Lab.2008 H-store: a high-performance, distributed main memory transaction processing system2009 MAD Skills: New Analysis Practices for Big Data2011 Apache Hadoop Goes Realtime at FacebookSee also[edit]Free software portalApache Accumulo – Secure Big TableApache Cassandra – A column-oriented database that supports access from HadoopApache CouchDB is a database that uses JSON for documents, JavaScript for MapReduce queries, and regular HTTP for an APIApache Mahout – Machine Learning algorithms implemented on HadoopBig dataCloud computingData Intensive ComputingDatameer Analytics Solution (DAS) – data source integration, storage, analytics engine and visualizationHBase – BigTable-model databaseHPCC – LexisNexis Risk Solutions High Performance Computing ClusterHypertable – HBase alternativeMapReduce – Hadoop's fundamental data filtering algorithmNutch – An effort to build an open source search engine based on Lucene and Hadoop, also created by Doug CuttingPivotal - Apache Hadoop distribution enhanced to support enterprise Big Data analytics. Industry’s first native massively parallel processing (MPP) SQL database on Hadoop.Pentaho – Open source data integration (Kettle), analytics, reporting, visualization and predictive analytics directly from Hadoop nodesSector/Sphere – Open source distributed storage and processingSimple Linux Utility for Resource ManagementTalend – An open source integration softwareReferences[edit]^ "Hadoop Releases". Hadoop.apache.org. Retrieved 2014-04-15. ^ "Applications and organizations using Hadoop". Wiki.apache.org. 2013-06-19. Retrieved 2013-10-17. ^ "Hadoop-related projects at". Hadoop.apache.org. Retrieved 2013-10-17. ^ "[nlpatumd] Adventures with Hadoop and Perl". Mail-archive.com. 2010-05-02. Retrieved 2013-04-05. ^ "Michael J. Cafarella". Web.eecs.umich.edu. Retrieved 2013-04-05. ^ Hadoop creator goes to Cloudera[dead link]^ Ashlee Vance (2009-03-17). "Hadoop, a Free Software Program, Finds Uses Beyond Search". The New York Times. Archived from the original on 11 February 2010. Retrieved 2010-01-20. ^ "Hadoop contains the distributed computing platform that was formerly a part of Nutch. This includes the Hadoop Distributed Filesystem (HDFS) and an implementation of MapReduce." About Hadoop[dead link]^ Harsh Chouraria (21 October 2012). "MR2 and YARN Briefly Explained". cloudera.com. Cloudera. Retrieved 23 October 2013. ^ "HDFS User Guide". Hadoop.apache.org. Retrieved 2012-05-23. [dead link]^ "Running Hadoop on Ubuntu Linux (Multi-Node Cluster)". ^ "Running Hadoop on Ubuntu Linux (Single-Node Cluster)". Retrieved 6 June 2013. ^ "HDFS Architecture". Retrieved 1 September 2013. ^ a b Yaniv Pessach (2013). Distributed Storage (Distributed Storage: Concepts, Algorithms, and Implementations ed.). Amazon.com ^ "Version 2.0 provides for manual failover and they are working on automatic failover:". Hadoop.apache.org. Retrieved 30 July 2013. ^ "Improving MapReduce performance through data placement in heterogeneous Hadoop Clusters" (PDF). Eng.auburn.ed. April 2010. ^ "HDFS Users Guide – Rack Awareness". Hadoop.apache.org. Retrieved 2013-10-17. ^ "Cloud analytics: Do we really need to reinvent the storage stack?". IBM. June 2009. ^ "HADOOP-6330: Integrating IBM General Parallel File System implementation of Hadoop Filesystem interface". IBM. 2009-10-23. ^ "HADOOP-6704: add support for Parascale filesystem". Parascale. 2010-04-14. ^ "HDFS with CloudIQ Storage". Appistry,Inc. 2010-07-06. ^ "High Availability Hadoop". HP. 2010-06-09. ^ job[dead link]^ "Refactor the scheduler out of the JobTracker". Hadoop Common. Apache Software Foundation. Retrieved 9 June 2012. ^ M. Tim Jones (6 December 2011). "Scheduling in Hadoop". ibm.com. IBM. Retrieved 20 November 2013. ^ [1][dead link] Hadoop Fair Scheduler Design Document^ [2][dead link] Capacity Scheduler Guide^ October 10, 2009 (2009-10-10). ""How 30+ enterprises are using Hadoop", in DBMS2". Dbms2.com. Retrieved 2013-10-17. ^ Yahoo! Launches World's Largest Hadoop Production Application (Hadoop and Distributed Computing at Yahoo!)[dead link]^ "Hadoop and Distributed Computing at Yahoo!". Yahoo!. 2011-04-20. Retrieved 2013-10-17. ^ "HDFS: Facebook has the world's largest Hadoop cluster!". Hadoopblog.blogspot.com. 2010-05-09. Retrieved 2012-05-23. ^ "Under the Hood: Hadoop Distributed File system reliability with Namenode and Avatarnode". Facebook. Retrieved 2012-09-13. ^ "Under the Hood: Scheduling MapReduce jobs more efficiently with Corona". Facebook. Retrieved 2012-11-09. ^ "Altior's AltraSTAR – Hadoop Storage Accelerator and Optimizer Now Certified on CDH4 (Cloudera's Distribution Including Apache Hadoop Version 4)" (Press release). Eatontown, New Jersey: Altior Inc. 2012-12-18. Retrieved 2013-10-30. ^ Varia, Jinesh (@jinman). "Taking Massive Distributed Computing to the Common Man – Hadoop on Amazon EC2/S3". Amazon Web Services Blog. Amazon.com. Retrieved 9 June 2012. ^ Gottfrid, Derek (November 1, 2007). "Self-service, Prorated Super Computing Fun!". The New York Times. Retrieved May 4, 2010. ^ http://aws.amazon.com/elasticmapreduce/^ "Amazon Elastic MapReduce Developer Guide" (PDF). Retrieved 2013-10-17. ^ http://aws.amazon.com/ec2/spot-instances/^ "Amazon Elastic MapReduce Now Supports Spot Instances". Amazon.com. 2011-08-18. Retrieved 2013-10-17. ^ "Amazon Elastic MapReduce FAQs". Amazon.com. Retrieved 2013-10-17. ^ Using Spot Instances with EMR on YouTube^ "Google Press Center: Google and IBM Announce University Initiative to Address Internet-Scale Computing Challenges". Google. 2007-10-08. Retrieved 2013-10-17. ^ Name (required). "NSF, Google, IBM form CLuE". Hadoopcommunity.wordpress.com. Retrieved 2013-10-17. ^ "Condor integrated with Hadoop's Map Reduce". University of Wisconsin–Madison. 2010-04-15. ^ "Why the Pace of Hadoop Innovation Has to Pick Up". Gigaom.com. 2011-04-25. Retrieved 2013-10-17. ^ "Defining Hadoop". Wiki.apache.org. 2013-03-30. Retrieved 2013-10-17. ^ "Defining Hadoop Compatibility: revisited". Mail-archives.apache.org. 2011-05-10. Retrieved 2013-10-17. Bibliography[edit]Lam, Chuck (July 28, 2010). Hadoop in Action (1st ed.). Manning Publications. p. 325. ISBN 1-935182-19-6. Venner, Jason (June 22, 2009). Pro Hadoop (1st ed.). Apress. p. 440. ISBN 1-4302-1942-4. White, Tom (June 16, 2009). Hadoop: The Definitive Guide (1st ed.). O'Reilly Media. p. 524. ISBN 0-596-52197-9. 
